/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IHM.java
 *
 * Created on 04/11/2012, 02:24:25
 */
package tcc_gui;

import java.awt.event.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author juliano
 */
public class IHM extends javax.swing.JFrame {

    public CommunicationController commController;
    public boolean connected = false;
    public boolean moving = false;
    public Refresh refresh;

    /**
     * Creates new form IHM
     */
    public IHM() {
        commController = new CommunicationController();
        //commController.setSIMPLE_TEST(true);
        initComponents();
        this.configFrame.setVisible(false);
        refresh = new Refresh();
        refresh.ihm = this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        speedId = new javax.swing.JTextField();
        speedValue = new javax.swing.JTextField();
        sendSpeed = new javax.swing.JButton();
        targetValue = new javax.swing.JTextField();
        targetId = new javax.swing.JTextField();
        sendTarget = new javax.swing.JButton();
        emergencyStop = new javax.swing.JButton();
        moveId = new javax.swing.JTextField();
        sendMove = new javax.swing.JButton();
        readSensorId = new javax.swing.JTextField();
        readSensor = new javax.swing.JButton();
        readSensorValue = new javax.swing.JTextField();
        commPort = new javax.swing.JTextField();
        connect = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        allSensorsValues = new javax.swing.JTextArea();
        configFrame = new javax.swing.JInternalFrame();
        sendSensor = new javax.swing.JButton();
        sensorAddress = new javax.swing.JTextField();
        sensorType = new javax.swing.JTextField();
        sensorId = new javax.swing.JTextField();
        configClose = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        typeId = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        typeParA = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        typeParB = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        typeMult = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        sendType = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        motorId = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        motorPwm1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        motorPwm2 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        motorCnA = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        motorCnB = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        motorPpv = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        motorCourse = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        motorReduction = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        motorVmax = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        motorKp = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        motorTp = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        motorPosIni = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        sendMotor = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        config = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Plataforma de Testes Microflu√≠dicos");
        setPreferredSize(new java.awt.Dimension(550, 450));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                kill(evt);
            }
        });

        speedId.setText("1");

        speedValue.setText("40");

        sendSpeed.setText("send speed");
        sendSpeed.setToolTipText("");
        sendSpeed.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sendSpeedMouseReleased(evt);
            }
        });

        targetValue.setText("1000");

        targetId.setText("1");

        sendTarget.setText("send target");
        sendTarget.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sendTargetMouseReleased(evt);
            }
        });

        emergencyStop.setText("emergency");
        emergencyStop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                emergencyStopMouseReleased(evt);
            }
        });

        moveId.setText("1");

        sendMove.setText("move");
        sendMove.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sendMoveMouseReleased(evt);
            }
        });

        readSensorId.setText("1");

        readSensor.setText("read pos");
        readSensor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                readSensorMouseReleased(evt);
            }
        });

        readSensorValue.setEditable(false);
        readSensorValue.setText("value");

        commPort.setText("COM3");

        connect.setText("connect");
        connect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                connectMouseReleased(evt);
            }
        });

        allSensorsValues.setEditable(false);
        allSensorsValues.setColumns(4);
        allSensorsValues.setRows(2);
        allSensorsValues.setWrapStyleWord(true);
        jScrollPane1.setViewportView(allSensorsValues);

        configFrame.setTitle("config");
        configFrame.setVisible(true);

        sendSensor.setText("send sensor");
        sendSensor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sendSensorMouseReleased(evt);
            }
        });

        sensorAddress.setText("14");

        sensorType.setText("1");

        sensorId.setText("1");

        configClose.setText("close");
        configClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                configCloseMouseReleased(evt);
            }
        });

        jLabel1.setText("ID");

        jLabel2.setText("Type");

        jLabel3.setText("pin");

        typeId.setText("1");

        jLabel4.setText("ID");

        typeParA.setText("1");

        jLabel5.setText("parA");

        typeParB.setText("1");

        jLabel6.setText("parB");

        typeMult.setText("1");

        jLabel7.setText("mult");

        sendType.setText("send type");
        sendType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sendTypeMouseReleased(evt);
            }
        });

        motorId.setText("1");

        jLabel8.setText("ID");

        motorPwm1.setText("3");

        jLabel9.setText("pwm1");

        motorPwm2.setText("5");

        jLabel10.setText("pwm2");

        motorCnA.setText("2");

        jLabel11.setText("cnA");

        motorCnB.setText("4");

        jLabel12.setText("cnB");

        motorPpv.setText("1000");

        jLabel13.setText("ppv");

        motorCourse.setText("10000");

        jLabel14.setText("curso");

        motorReduction.setText("810");

        jLabel15.setText("invK");

        motorVmax.setText("45");

        jLabel16.setText("Vmax");

        motorKp.setText("1");

        jLabel17.setText("Kp");

        motorTp.setText("0.014");

        jLabel18.setText("Tp");

        motorPosIni.setText("0");

        jLabel19.setText("posIni");

        sendMotor.setText("send motor");
        sendMotor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sendMotorMouseReleased(evt);
            }
        });

        org.jdesktop.layout.GroupLayout configFrameLayout = new org.jdesktop.layout.GroupLayout(configFrame.getContentPane());
        configFrame.getContentPane().setLayout(configFrameLayout);
        configFrameLayout.setHorizontalGroup(
            configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(configFrameLayout.createSequentialGroup()
                .addContainerGap()
                .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jSeparator3)
                    .add(jSeparator1)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, configFrameLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(configClose))
                    .add(jSeparator2)
                    .add(configFrameLayout.createSequentialGroup()
                        .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(motorReduction, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel15))
                        .add(18, 18, 18)
                        .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(configFrameLayout.createSequentialGroup()
                                .add(motorVmax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(motorKp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(configFrameLayout.createSequentialGroup()
                                .add(jLabel16)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jLabel17)))
                        .add(18, 18, 18)
                        .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(motorTp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel18))
                        .add(18, 18, 18)
                        .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(configFrameLayout.createSequentialGroup()
                                .add(jLabel19)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(configFrameLayout.createSequentialGroup()
                                .add(0, 0, Short.MAX_VALUE)
                                .add(motorPosIni, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(sendMotor))))
                    .add(configFrameLayout.createSequentialGroup()
                        .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(configFrameLayout.createSequentialGroup()
                                .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(sensorId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel1))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(configFrameLayout.createSequentialGroup()
                                        .add(jLabel2)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(jLabel3))
                                    .add(configFrameLayout.createSequentialGroup()
                                        .add(sensorType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(sensorAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(18, 18, 18)
                                        .add(sendSensor))))
                            .add(configFrameLayout.createSequentialGroup()
                                .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(typeId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(jLabel4))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(configFrameLayout.createSequentialGroup()
                                        .add(jLabel5)
                                        .add(18, 18, 18)
                                        .add(jLabel6)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(jLabel7))
                                    .add(configFrameLayout.createSequentialGroup()
                                        .add(typeParA, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(18, 18, 18)
                                        .add(typeParB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(18, 18, 18)
                                        .add(typeMult, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(18, 18, 18)
                                        .add(sendType))))
                            .add(configFrameLayout.createSequentialGroup()
                                .add(motorId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(motorPwm1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(motorPwm2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(motorCnA, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(motorCnB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(motorPpv, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(motorCourse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(configFrameLayout.createSequentialGroup()
                                .add(jLabel8)
                                .add(18, 18, 18)
                                .add(jLabel9)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel10)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jLabel11)
                                .add(18, 18, 18)
                                .add(jLabel12)
                                .add(18, 18, 18)
                                .add(jLabel13)
                                .add(28, 28, 28)
                                .add(jLabel14)))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        configFrameLayout.setVerticalGroup(
            configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(configFrameLayout.createSequentialGroup()
                .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(configFrameLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel1)
                            .add(jLabel2)
                            .add(jLabel3)))
                    .add(configFrameLayout.createSequentialGroup()
                        .add(30, 30, 30)
                        .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(sensorId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(sensorType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(sensorAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(sendSensor))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jLabel5)
                    .add(jLabel6)
                    .add(jLabel7))
                .add(2, 2, 2)
                .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(typeId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(typeParA, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(typeParB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(typeMult, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(sendType))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(1, 1, 1)
                .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(jLabel9)
                    .add(jLabel10)
                    .add(jLabel11)
                    .add(jLabel12)
                    .add(jLabel13)
                    .add(jLabel14))
                .add(3, 3, 3)
                .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(motorId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(motorPwm1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(motorPwm2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(motorCnA, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(motorCnB, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(motorPpv, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(motorCourse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(5, 5, 5)
                .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel15)
                    .add(jLabel16)
                    .add(jLabel17)
                    .add(jLabel18)
                    .add(jLabel19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(configFrameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(motorReduction, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(motorVmax, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(motorKp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(motorTp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(motorPosIni, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(sendMotor))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jSeparator3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 22, Short.MAX_VALUE)
                .add(configClose)
                .addContainerGap())
        );

        config.setText("config");
        config.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                configMouseReleased(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(21, 21, 21)
                        .add(commPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(connect))
                    .add(layout.createSequentialGroup()
                        .add(targetId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(targetValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(sendTarget))
                    .add(layout.createSequentialGroup()
                        .add(moveId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(sendMove))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(speedId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(speedValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(readSensorId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(config)
                                .add(18, 18, 18)
                                .add(emergencyStop)
                                .add(18, 18, 18)
                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(sendSpeed)
                                    .add(layout.createSequentialGroup()
                                        .add(readSensor)
                                        .add(26, 26, 26)
                                        .add(readSensorValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(configFrame, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(config)
                            .add(emergencyStop))
                        .add(67, 67, 67)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(readSensor)
                            .add(readSensorId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(readSensorValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(31, 31, 31)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(speedId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(speedValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(sendSpeed))
                        .add(26, 26, 26)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(targetValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(targetId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(sendTarget))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(moveId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(sendMove))
                        .add(64, 64, 64)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(connect)
                            .add(commPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(configFrame, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendSensorMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendSensorMouseReleased
        int id = Integer.parseInt(this.sensorId.getText());
        int type = Integer.parseInt(this.sensorType.getText());
        int address = Integer.parseInt(this.sensorAddress.getText());
        try {
            this.commController.writeRegister(1, CommunicationController.Register.SENSOR_ID, id);
            this.commController.writeRegister(1, CommunicationController.Register.SENSOR_TYPE, type);
            this.commController.writeRegister(1, CommunicationController.Register.SENSOR_ADDRESS, address);
            this.commController.writeRegister(1, CommunicationController.Register.SENSOR_RECORD, 1);

        } catch (Exception ex) {
            Logger.getLogger(IHM.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_sendSensorMouseReleased

    private void kill(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_kill
        if (connected) {
            try {
                commController.end();
                refresh.interrupt();
            } catch (Exception ex) {
                Logger.getLogger(IHM.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.exit(0);
    }//GEN-LAST:event_kill

    private void sendTypeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendTypeMouseReleased
        int id = Integer.parseInt(this.typeId.getText());
        int parA = Integer.parseInt(this.typeParA.getText());
        int parB = Integer.parseInt(this.typeParB.getText());
        int mult = Integer.parseInt(this.typeMult.getText());
        try {
            this.commController.writeRegister(1, CommunicationController.Register.TYPE_ID, id);
            this.commController.writeRegister(1, CommunicationController.Register.TYPE_PARA, parA);
            this.commController.writeRegister(1, CommunicationController.Register.TYPE_PARB, parB);
            this.commController.writeRegister(1, CommunicationController.Register.TYPE_MULT, mult);
            this.commController.writeRegister(1, CommunicationController.Register.TYPE_RECORD, 1);
        } catch (Exception ex) {
            Logger.getLogger(IHM.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_sendTypeMouseReleased

    private void readSensorMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_readSensorMouseReleased

        int id = Integer.parseInt(this.readSensorId.getText());
        try {
            this.commController.writeRegister(1, CommunicationController.Register.READPOS_MOTOR_ID, id);
            this.commController.writeRegister(1, CommunicationController.Register.READPOS_READY, 0);
            CommReturn ret = new CommReturn();
            int i = 0;

            ret = this.commController.readRegister(1, CommunicationController.Register.READPOS_READY, 1);
            while (ret.value[0] == 0 && i<CommunicationController.NUMBER_OF_RETRIES) {
                this.wait(CommunicationController.FRAME_TIMEOUT);
                ret = this.commController.readRegister(1, CommunicationController.Register.READPOS_READY, 1);
                i++;
            }

            ret = this.commController.readRegister(1, CommunicationController.Register.READPOS_VALUE, 1);
            this.readSensorValue.setText(Integer.toString(ret.value[0]));
        } catch (Exception ex) {
            Logger.getLogger(IHM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_readSensorMouseReleased

    private void connectMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connectMouseReleased
        if (!connected) {
            try {
                commController.init(this.commPort.getText());
                connected = true;
                this.connect.setText("disconnect");
            } catch (Exception ex) {
                Logger.getLogger(IHM.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                connected = false;
                commController.end();
                this.connect.setText("connect");
            } catch (Exception ex) {
                Logger.getLogger(IHM.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_connectMouseReleased

    private void sendMotorMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendMotorMouseReleased
        int id = Integer.parseInt(this.motorId.getText());
        int pwm1 = Integer.parseInt(this.motorPwm1.getText());
        int pwm2 = Integer.parseInt(this.motorPwm2.getText());
        int cnA = Integer.parseInt(this.motorCnA.getText());
        int cnB = Integer.parseInt(this.motorCnB.getText());
        int ppv = Integer.parseInt(this.motorPpv.getText());
        int course = Integer.parseInt(this.motorCourse.getText());
        int reduction = Integer.parseInt(this.motorReduction.getText());
        int vmax = Integer.parseInt(this.motorVmax.getText());
        int kp = Integer.parseInt(this.motorKp.getText());
        int tp = (int) (1.0 / Double.parseDouble(this.motorTp.getText()));
        int posini = Integer.parseInt(this.motorPosIni.getText());
        try {
            this.commController.writeRegister(1, CommunicationController.Register.MOTOR_ID, id);
            this.commController.writeRegister(1, CommunicationController.Register.MOTOR_PWM1, pwm1);
            this.commController.writeRegister(1, CommunicationController.Register.MOTOR_PWM2, pwm2);
            this.commController.writeRegister(1, CommunicationController.Register.MOTOR_CNA, cnA);
            this.commController.writeRegister(1, CommunicationController.Register.MOTOR_CNB, cnB);
            this.commController.writeRegister(1, CommunicationController.Register.MOTOR_PPV, ppv);
            this.commController.writeRegister(1, CommunicationController.Register.MOTOR_COURSE, course);
            this.commController.writeRegister(1, CommunicationController.Register.MOTOR_REDUCTION, reduction);
            this.commController.writeRegister(1, CommunicationController.Register.MOTOR_VMAX, vmax);
            this.commController.writeRegister(1, CommunicationController.Register.MOTOR_KP, kp);
            this.commController.writeRegister(1, CommunicationController.Register.MOTOR_TP, tp);
            this.commController.writeRegister(1, CommunicationController.Register.MOTOR_POSINI, posini);
            this.commController.writeRegister(1, CommunicationController.Register.MOTOR_RECORD, 1);
        } catch (Exception ex) {
            Logger.getLogger(IHM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sendMotorMouseReleased

    private void sendSpeedMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendSpeedMouseReleased
        int id = Integer.parseInt(this.speedId.getText());
        int speed = Integer.parseInt(this.speedValue.getText());
        try {
            this.commController.writeRegister(1, CommunicationController.Register.SPEED_MOTOR_ID, id);
            this.commController.writeRegister(1, CommunicationController.Register.SPEED_VALUE, speed);
            this.commController.writeRegister(1, CommunicationController.Register.SPEED_RECORD, 1);
        } catch (Exception ex) {
            Logger.getLogger(IHM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sendSpeedMouseReleased

    private void sendTargetMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendTargetMouseReleased
        int id = Integer.parseInt(this.targetId.getText());
        int target = Integer.parseInt(this.targetValue.getText());
        try {
            this.commController.writeRegister(1, CommunicationController.Register.TARGET_MOTOR_ID, id);
            this.commController.writeRegister(1, CommunicationController.Register.TARGET_VALUE, target);
            this.commController.writeRegister(1, CommunicationController.Register.TARGET_RECORD, 1);
        } catch (Exception ex) {
            Logger.getLogger(IHM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sendTargetMouseReleased

    private void sendMoveMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendMoveMouseReleased
        int id = Integer.parseInt(this.moveId.getText());
        int move = 1;
        this.sendMove.setText("stop");
        if (moving) {
            move = 0;
            this.sendMove.setText("move");
        }
        moving = !moving;
        try {
            this.commController.writeRegister(1, CommunicationController.Register.MOVE_MOTOR_ID, id);
            this.commController.writeRegister(1, CommunicationController.Register.MOVE_VALUE, move);
            this.commController.writeRegister(1, CommunicationController.Register.MOVE_RECORD, 1);
        } catch (Exception ex) {
            Logger.getLogger(IHM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_sendMoveMouseReleased

    private void configMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_configMouseReleased
        this.configFrame.setVisible(true);
    }//GEN-LAST:event_configMouseReleased

    private void configCloseMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_configCloseMouseReleased
       this.configFrame.setVisible(false);
    }//GEN-LAST:event_configCloseMouseReleased

    private void emergencyStopMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emergencyStopMouseReleased
        try {
            this.commController.writeRegister(1, CommunicationController.Register.EMERGENCY_STOP, 1);
        } catch (Exception ex) {
            Logger.getLogger(IHM.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_emergencyStopMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IHM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IHM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IHM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IHM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IHM().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextArea allSensorsValues;
    private javax.swing.JTextField commPort;
    private javax.swing.JButton config;
    private javax.swing.JButton configClose;
    private javax.swing.JInternalFrame configFrame;
    private javax.swing.JToggleButton connect;
    private javax.swing.JButton emergencyStop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextField motorCnA;
    private javax.swing.JTextField motorCnB;
    private javax.swing.JTextField motorCourse;
    private javax.swing.JTextField motorId;
    private javax.swing.JTextField motorKp;
    private javax.swing.JTextField motorPosIni;
    private javax.swing.JTextField motorPpv;
    private javax.swing.JTextField motorPwm1;
    private javax.swing.JTextField motorPwm2;
    private javax.swing.JTextField motorReduction;
    private javax.swing.JTextField motorTp;
    private javax.swing.JTextField motorVmax;
    private javax.swing.JTextField moveId;
    private javax.swing.JButton readSensor;
    private javax.swing.JTextField readSensorId;
    private javax.swing.JTextField readSensorValue;
    private javax.swing.JButton sendMotor;
    private javax.swing.JButton sendMove;
    private javax.swing.JButton sendSensor;
    private javax.swing.JButton sendSpeed;
    private javax.swing.JButton sendTarget;
    private javax.swing.JButton sendType;
    private javax.swing.JTextField sensorAddress;
    private javax.swing.JTextField sensorId;
    private javax.swing.JTextField sensorType;
    private javax.swing.JTextField speedId;
    private javax.swing.JTextField speedValue;
    private javax.swing.JTextField targetId;
    private javax.swing.JTextField targetValue;
    private javax.swing.JTextField typeId;
    private javax.swing.JTextField typeMult;
    private javax.swing.JTextField typeParA;
    private javax.swing.JTextField typeParB;
    // End of variables declaration//GEN-END:variables
}
